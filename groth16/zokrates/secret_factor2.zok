import "hashes/sha256/sha256Padded";
from "utils/casts.zok" import cast;

/**********
TODO: REPLACE THE ONE TIME PAD WITH PK-ENCRYPTION

TODO: REPLACE u64 by u1024 (... I know, this doesn't yet exist ...)

TODO: (Fabrice) (Really, this is a dApp TODO) Hard code Eve's address so that the bounty cannot be re-directed, 
    and Alice cannot censor Eve from eventually claiming
***********/

def reveal(u64 secret_summand, u64 hidden_factor) -> u64 {
    return hidden_factor - secret_summand;
}

def main(u64 hidden_factor, private u64 secret_summand) {
    // secret_summand is a secret "one time pad" 
    // shared between Alice (app creator) and Eve (bounty hunter)

    u8[8] hidden_factor_bytes = cast(hidden_factor);
    u32[8] secret_summand_hash = sha256Padded(hidden_factor_bytes);

    u64 composite = 1698269078375486647;
    u64 factor = reveal(secret_summand, hidden_factor);
    u32[8] expected_hash = [1743144288, 723848182, 499788724, 2137457483, 3835732723, 1990267733, 2952600833, 806856394];

    log("hidden_factor = {}", hidden_factor);
    for u32 i in 0..8 {
        log("hidden_factor_bytes[{}] = {}", i, hidden_factor_bytes[i]);
    }
    for u32 i in 0..8 {
        log("secret_summand_hash[{}] = {}", i, secret_summand_hash[i]);
    }


    assert(expected_hash == secret_summand_hash);
    assert(1 < factor && factor < composite && composite % factor == 0);
    return;
}



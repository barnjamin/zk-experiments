{
    "hints": {
        "bootstrap_root": {
            "structs": {
                "vk": {
                    "name": "VerificationKey",
                    "elements": [
                        [
                            "alpha1",
                            "byte[48][2]"
                        ],
                        [
                            "beta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "gamma2",
                            "byte[48][2][2]"
                        ],
                        [
                            "delta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "IC",
                            "byte[48][2][2]"
                        ]
                    ]
                }
            }
        },
        "bootstrap_secret_factor": {
            "structs": {
                "vk": {
                    "name": "VerificationKey",
                    "elements": [
                        [
                            "alpha1",
                            "byte[48][2]"
                        ],
                        [
                            "beta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "gamma2",
                            "byte[48][2][2]"
                        ],
                        [
                            "delta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "IC",
                            "byte[48][2][2]"
                        ]
                    ]
                }
            }
        },
        "verify_root": {
            "structs": {
                "proof": {
                    "name": "Proof",
                    "elements": [
                        [
                            "A",
                            "byte[48][2]"
                        ],
                        [
                            "B",
                            "byte[48][2][2]"
                        ],
                        [
                            "C",
                            "byte[48][2]"
                        ]
                    ]
                }
            }
        },
        "verify_secret_factor": {
            "structs": {
                "proof": {
                    "name": "Proof",
                    "elements": [
                        [
                            "A",
                            "byte[48][2]"
                        ],
                        [
                            "B",
                            "byte[48][2][2]"
                        ],
                        [
                            "C",
                            "byte[48][2]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKaW50Y2Jsb2NrIDAgMSA2NzIgMjg4IDE5MiAxMzUwMApieXRlY2Jsb2NrIDB4MDY4MTAxIDB4MTUxZjdjNzUgMHgwMCAweDFhMDExMWVhMzk3ZmU2OWE0YjFiYTdiNjQzNGJhY2Q3NjQ3NzRiODRmMzg1MTJiZjY3MzBkMmEwZjZiMGY2MjQxZWFiZmZmZWIxNTNmZmZmYjlmZWZmZmZmZmZmYWFhYiAweDcyNmY2Zjc0NWY3NjZiIDB4NzM2NTYzNzI2NTc0NWY2NjYxNjM3NDZmNzI1Zjc2NmIgMHgKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDEwCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4MWE5NzUyMzQgLy8gImJvb3RzdHJhcF9yb290KChieXRlWzQ4XVsyXSxieXRlWzQ4XVsyXVsyXSxieXRlWzQ4XVsyXVsyXSxieXRlWzQ4XVsyXVsyXSxieXRlWzQ4XVsyXVsyXSkpdm9pZCIKPT0KYm56IG1haW5fbDkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg4YjllODM2YyAvLyAiYm9vdHN0cmFwX3NlY3JldF9mYWN0b3IoKGJ5dGVbNDhdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdWzJdKSl2b2lkIgo9PQpibnogbWFpbl9sOAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDAzNzc3OGJkIC8vICJ2ZXJpZnlfcm9vdChieXRlWzMyXVsxXSwoYnl0ZVs0OF1bMl0sYnl0ZVs0OF1bMl1bMl0sYnl0ZVs0OF1bMl0pKWJvb2wiCj09CmJueiBtYWluX2w3CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4OTc0NWFhM2YgLy8gInZlcmlmeV9zZWNyZXRfZmFjdG9yKGJ5dGVbMzJdWzFdLChieXRlWzQ4XVsyXSxieXRlWzQ4XVsyXVsyXSxieXRlWzQ4XVsyXSkpYm9vbCIKPT0KYm56IG1haW5fbDYKZXJyCm1haW5fbDY6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKc3RvcmUgMwp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCnN0b3JlIDQKbG9hZCAzCmxvYWQgNApjYWxsc3ViIHZlcmlmeXNlY3JldGZhY3Rvcl8xMwpzdG9yZSA1CmJ5dGVjXzEgLy8gMHgxNTFmN2M3NQpieXRlY18yIC8vIDB4MDAKaW50Y18wIC8vIDAKbG9hZCA1CnNldGJpdApjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2w3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCnN0b3JlIDAKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgpzdG9yZSAxCmxvYWQgMApsb2FkIDEKY2FsbHN1YiB2ZXJpZnlyb290XzEyCnN0b3JlIDIKYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CmJ5dGVjXzIgLy8gMHgwMAppbnRjXzAgLy8gMApsb2FkIDIKc2V0Yml0CmNvbmNhdApsb2cKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDg6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKY2FsbHN1YiBib290c3RyYXBzZWNyZXRmYWN0b3JfMTEKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDk6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CnR4bmEgQXBwbGljYXRpb25BcmdzIDEKY2FsbHN1YiBib290c3RyYXByb290XzEwCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQpibnogbWFpbl9sMTQKdHhuIE9uQ29tcGxldGlvbgpwdXNoaW50IDQgLy8gVXBkYXRlQXBwbGljYXRpb24KPT0KYm56IG1haW5fbDEzCmVycgptYWluX2wxMzoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmNhbGxzdWIgdXBkYXRlXzcKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE0Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVfMAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGNyZWF0ZQpjcmVhdGVfMDoKcHJvdG8gMCAwCmludGNfMSAvLyAxCnJldHVybgoKLy8gY29tcHV0ZV9saW5lYXJfY29tYmluYXRpb24KY29tcHV0ZWxpbmVhcmNvbWJpbmF0aW9uXzE6CnByb3RvIDIgMQpmcmFtZV9kaWcgLTIKaW50Y18yIC8vIDY3MgpkaWcgMQpsZW4Kc3Vic3RyaW5nMwpleHRyYWN0IDk2IDAKZnJhbWVfZGlnIC0xCmNhbGxzdWIgY3VydmVtdWx0aWV4cF80CmZyYW1lX2RpZyAtMgppbnRjXzIgLy8gNjcyCmRpZyAxCmxlbgpzdWJzdHJpbmczCmV4dHJhY3QgMCA5NgpjYWxsc3ViIGN1cnZlYWRkXzMKcmV0c3ViCgovLyB2YWxpZF9wYWlyaW5nCnZhbGlkcGFpcmluZ18yOgpwcm90byAzIDEKZnJhbWVfZGlnIC0zCmV4dHJhY3QgMCA5NgpleHRyYWN0IDAgNDgKYnl0ZWNfMyAvLyAweDFhMDExMWVhMzk3ZmU2OWE0YjFiYTdiNjQzNGJhY2Q3NjQ3NzRiODRmMzg1MTJiZjY3MzBkMmEwZjZiMGY2MjQxZWFiZmZmZWIxNTNmZmZmYjlmZWZmZmZmZmZmYWFhYgpmcmFtZV9kaWcgLTMKZXh0cmFjdCAwIDk2CmV4dHJhY3QgNDggMApieXRlY18zIC8vIDB4MWEwMTExZWEzOTdmZTY5YTRiMWJhN2I2NDM0YmFjZDc2NDc3NGI4NGYzODUxMmJmNjczMGQyYTBmNmIwZjYyNDFlYWJmZmZlYjE1M2ZmZmZiOWZlZmZmZmZmZmZhYWFiCmIlCmItCmNvbmNhdApmcmFtZV9kaWcgLTIKZXh0cmFjdCAwIDk2CmNvbmNhdApmcmFtZV9kaWcgLTEKY29uY2F0CmZyYW1lX2RpZyAtMwppbnRjXzMgLy8gMjg4CmRpZyAxCmxlbgpzdWJzdHJpbmczCmNvbmNhdApmcmFtZV9kaWcgLTMKZXh0cmFjdCA5NiAxOTIKZnJhbWVfZGlnIC0yCmV4dHJhY3QgOTYgMTkyCmNvbmNhdApmcmFtZV9kaWcgLTIKaW50Y18zIC8vIDI4OAppbnRjIDQgLy8gMTkyCmV4dHJhY3QzCmNvbmNhdApmcmFtZV9kaWcgLTIKcHVzaGludCA0ODAgLy8gNDgwCmludGMgNCAvLyAxOTIKZXh0cmFjdDMKY29uY2F0CmNhbGxzdWIgY3VydmVwYWlyaW5nXzUKcmV0c3ViCgovLyBjdXJ2ZV9hZGQKY3VydmVhZGRfMzoKcHJvdG8gMiAxCmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTEKZWNfYWRkIEJMUzEyXzM4MV9HMQpyZXRzdWIKCi8vIGN1cnZlX211bHRpX2V4cApjdXJ2ZW11bHRpZXhwXzQ6CnByb3RvIDIgMQpmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0xCmVjX211bHRpX2V4cCBCTFMxMl8zODFfRzEKcmV0c3ViCgovLyBjdXJ2ZV9wYWlyaW5nCmN1cnZlcGFpcmluZ181Ogpwcm90byAyIDEKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAtMQplY19wYWlyaW5nX2NoZWNrIEJMUzEyXzM4MV9HMQpyZXRzdWIKCi8vIGF1dGhfb25seQphdXRob25seV82Ogpwcm90byAxIDEKZnJhbWVfZGlnIC0xCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQpyZXRzdWIKCi8vIHVwZGF0ZQp1cGRhdGVfNzoKcHJvdG8gMCAwCnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob25seV82Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBhdXRoX29ubHkKYXV0aG9ubHlfODoKcHJvdG8gMSAxCmZyYW1lX2RpZyAtMQpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KcmV0c3ViCgovLyBhdXRoX29ubHkKYXV0aG9ubHlfOToKcHJvdG8gMSAxCmZyYW1lX2RpZyAtMQpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KcmV0c3ViCgovLyBib290c3RyYXBfcm9vdApib290c3RyYXByb290XzEwOgpwcm90byAxIDAKdHhuIFNlbmRlcgpjYWxsc3ViIGF1dGhvbmx5XzgKLy8gdW5hdXRob3JpemVkCmFzc2VydApieXRlYyA0IC8vICJyb290X3ZrIgpmcmFtZV9kaWcgLTEKYm94X3B1dApyZXRzdWIKCi8vIGJvb3RzdHJhcF9zZWNyZXRfZmFjdG9yCmJvb3RzdHJhcHNlY3JldGZhY3Rvcl8xMToKcHJvdG8gMSAwCnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob25seV85Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWMgNSAvLyAic2VjcmV0X2ZhY3Rvcl92ayIKZnJhbWVfZGlnIC0xCmJveF9wdXQKcmV0c3ViCgovLyB2ZXJpZnlfcm9vdAp2ZXJpZnlyb290XzEyOgpwcm90byAyIDEKaW50Y18wIC8vIDAKYnl0ZWMgNiAvLyAiIgpkdXAKaW50YyA1IC8vIDEzNTAwCnB1c2hpbnQgMTAgLy8gMTAKKwpzdG9yZSA2CnZlcmlmeXJvb3RfMTJfbDE6CmxvYWQgNgpnbG9iYWwgT3Bjb2RlQnVkZ2V0Cj4KYnogdmVyaWZ5cm9vdF8xMl9sMwppdHhuX2JlZ2luCnB1c2hpbnQgNiAvLyBhcHBsCml0eG5fZmllbGQgVHlwZUVudW0KcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCml0eG5fZmllbGQgT25Db21wbGV0aW9uCmJ5dGVjXzAgLy8gMHgwNjgxMDEKaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KYnl0ZWNfMCAvLyAweDA2ODEwMQppdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCml0eG5fc3VibWl0CmIgdmVyaWZ5cm9vdF8xMl9sMQp2ZXJpZnlyb290XzEyX2wzOgpieXRlYyA0IC8vICJyb290X3ZrIgpib3hfZ2V0CnN0b3JlIDgKc3RvcmUgNwpsb2FkIDgKLy8gVmVyaWZpY2F0aW9uIEtleSBub3Qgc2V0CmFzc2VydApsb2FkIDcKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAtMgpjYWxsc3ViIGNvbXB1dGVsaW5lYXJjb21iaW5hdGlvbl8xCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKY2FsbHN1YiB2YWxpZHBhaXJpbmdfMgohCiEKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gdmVyaWZ5X3NlY3JldF9mYWN0b3IKdmVyaWZ5c2VjcmV0ZmFjdG9yXzEzOgpwcm90byAyIDEKaW50Y18wIC8vIDAKYnl0ZWMgNiAvLyAiIgpkdXAKaW50YyA1IC8vIDEzNTAwCnB1c2hpbnQgMTAgLy8gMTAKKwpzdG9yZSA5CnZlcmlmeXNlY3JldGZhY3Rvcl8xM19sMToKbG9hZCA5Cmdsb2JhbCBPcGNvZGVCdWRnZXQKPgpieiB2ZXJpZnlzZWNyZXRmYWN0b3JfMTNfbDMKaXR4bl9iZWdpbgpwdXNoaW50IDYgLy8gYXBwbAppdHhuX2ZpZWxkIFR5cGVFbnVtCnB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgppdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgpieXRlY18wIC8vIDB4MDY4MTAxCml0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCmJ5dGVjXzAgLy8gMHgwNjgxMDEKaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQppdHhuX3N1Ym1pdApiIHZlcmlmeXNlY3JldGZhY3Rvcl8xM19sMQp2ZXJpZnlzZWNyZXRmYWN0b3JfMTNfbDM6CmJ5dGVjIDUgLy8gInNlY3JldF9mYWN0b3JfdmsiCmJveF9nZXQKc3RvcmUgMTEKc3RvcmUgMTAKbG9hZCAxMQovLyBWZXJpZmljYXRpb24gS2V5IG5vdCBzZXQKYXNzZXJ0CmxvYWQgMTAKZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAtMgpjYWxsc3ViIGNvbXB1dGVsaW5lYXJjb21iaW5hdGlvbl8xCmZyYW1lX2J1cnkgMgpmcmFtZV9kaWcgLTEKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIDIKY2FsbHN1YiB2YWxpZHBhaXJpbmdfMgohCiEKZnJhbWVfYnVyeSAwCnJldHN1Yg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDkKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "schema": {
        "local": {
            "declared": {},
            "reserved": {}
        },
        "global": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Verifier",
        "methods": [
            {
                "name": "bootstrap_root",
                "args": [
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2][2],byte[48][2][2],byte[48][2][2])",
                        "name": "vk"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bootstrap_secret_factor",
                "args": [
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2][2],byte[48][2][2],byte[48][2][2])",
                        "name": "vk"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "verify_root",
                "args": [
                    {
                        "type": "byte[32][1]",
                        "name": "inputs"
                    },
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2])",
                        "name": "proof"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "verify_secret_factor",
                "args": [
                    {
                        "type": "byte[32][1]",
                        "name": "inputs"
                    },
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2])",
                        "name": "proof"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    }
}
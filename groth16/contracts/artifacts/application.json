{
    "hints": {
        "bootstrap_root": {
            "structs": {
                "vk": {
                    "name": "VerificationKey",
                    "elements": [
                        [
                            "alpha1",
                            "byte[48][2]"
                        ],
                        [
                            "beta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "gamma2",
                            "byte[48][2][2]"
                        ],
                        [
                            "delta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "IC",
                            "byte[48][2][2]"
                        ]
                    ]
                }
            }
        },
        "bootstrap_secret_factor": {
            "structs": {
                "vk": {
                    "name": "VerificationKey",
                    "elements": [
                        [
                            "alpha1",
                            "byte[48][2]"
                        ],
                        [
                            "beta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "gamma2",
                            "byte[48][2][2]"
                        ],
                        [
                            "delta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "IC",
                            "byte[48][2][2]"
                        ]
                    ]
                }
            }
        },
        "verify_root": {
            "structs": {
                "proof": {
                    "name": "Proof",
                    "elements": [
                        [
                            "A",
                            "byte[48][2]"
                        ],
                        [
                            "B",
                            "byte[48][2][2]"
                        ],
                        [
                            "C",
                            "byte[48][2]"
                        ]
                    ]
                }
            }
        },
        "claim_bounty": {
            "structs": {
                "proof": {
                    "name": "Proof",
                    "elements": [
                        [
                            "A",
                            "byte[48][2]"
                        ],
                        [
                            "B",
                            "byte[48][2][2]"
                        ],
                        [
                            "C",
                            "byte[48][2]"
                        ]
                    ]
                }
            }
        },
        "deprecated_verify_secret_factor": {
            "structs": {
                "proof": {
                    "name": "Proof",
                    "elements": [
                        [
                            "A",
                            "byte[48][2]"
                        ],
                        [
                            "B",
                            "byte[48][2][2]"
                        ],
                        [
                            "C",
                            "byte[48][2]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDkKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "schema": {
        "local": {
            "declared": {},
            "reserved": {}
        },
        "global": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Verifier",
        "methods": [
            {
                "name": "bootstrap_root",
                "args": [
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2][2],byte[48][2][2],byte[48][2][2])",
                        "name": "vk"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bootstrap_secret_factor",
                "args": [
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2][2],byte[48][2][2],byte[48][2][2])",
                        "name": "vk"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "verify_root",
                "args": [
                    {
                        "type": "byte[32][1]",
                        "name": "inputs"
                    },
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2])",
                        "name": "proof"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "claim_bounty",
                "args": [
                    {
                        "type": "byte[32][1]",
                        "name": "inputs"
                    },
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2])",
                        "name": "proof"
                    },
                    {
                        "type": "account",
                        "name": "winner"
                    }
                ],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Provide the proof containing the encrypted secret_factor.\nIf verification succeeds: 1. replace the \"secret_factor\" box value (formerly the verification key) with the encrypted secret_factor 2. return the encrypted secret_factor"
            },
            {
                "name": "deprecated_verify_secret_factor",
                "args": [
                    {
                        "type": "byte[32][1]",
                        "name": "inputs"
                    },
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2])",
                        "name": "proof"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    }
}
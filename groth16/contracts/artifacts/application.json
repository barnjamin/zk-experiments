{
    "hints": {
        "bootstrap": {
            "structs": {
                "vk": {
                    "name": "VerificationKey",
                    "elements": [
                        [
                            "alpha1",
                            "byte[48][2]"
                        ],
                        [
                            "beta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "gamma2",
                            "byte[48][2][2]"
                        ],
                        [
                            "delta2",
                            "byte[48][2][2]"
                        ],
                        [
                            "IC",
                            "byte[48][2][2]"
                        ]
                    ]
                }
            }
        },
        "verify": {
            "structs": {
                "proof": {
                    "name": "Proof",
                    "elements": [
                        [
                            "A",
                            "byte[48][2]"
                        ],
                        [
                            "B",
                            "byte[48][2][2]"
                        ],
                        [
                            "C",
                            "byte[48][2]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKaW50Y2Jsb2NrIDAgMSA2NzIgMjg4IDE5MgpieXRlY2Jsb2NrIDB4MWEwMTExZWEzOTdmZTY5YTRiMWJhN2I2NDM0YmFjZDc2NDc3NGI4NGYzODUxMmJmNjczMGQyYTBmNmIwZjYyNDFlYWJmZmZlYjE1M2ZmZmZiOWZlZmZmZmZmZmZhYWFiIDB4NzY2YiAweDA2ODEwMQp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sNgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDMzNjNkMmQ3IC8vICJib290c3RyYXAoKGJ5dGVbNDhdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdWzJdKSl2b2lkIgo9PQpibnogbWFpbl9sNQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDljNTUwYjQzIC8vICJ2ZXJpZnkoYnl0ZVszMl1bMV0sKGJ5dGVbNDhdWzJdLGJ5dGVbNDhdWzJdWzJdLGJ5dGVbNDhdWzJdKSlib29sIgo9PQpibnogbWFpbl9sNAplcnIKbWFpbl9sNDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpzdG9yZSAyCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKc3RvcmUgMwpsb2FkIDIKbG9hZCAzCmNhbGxzdWIgdmVyaWZ5XzExCnN0b3JlIDQKcHVzaGJ5dGVzIDB4MTUxZjdjNzUgLy8gMHgxNTFmN2M3NQpwdXNoYnl0ZXMgMHgwMCAvLyAweDAwCmludGNfMCAvLyAwCmxvYWQgNApzZXRiaXQKY29uY2F0CmxvZwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpjYWxsc3ViIGJvb3RzdHJhcF8xMAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQpibnogbWFpbl9sMTAKdHhuIE9uQ29tcGxldGlvbgpwdXNoaW50IDQgLy8gVXBkYXRlQXBwbGljYXRpb24KPT0KYm56IG1haW5fbDkKZXJyCm1haW5fbDk6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIHVwZGF0ZV84CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMDoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0CmNhbGxzdWIgY3JlYXRlXzAKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBjcmVhdGUKY3JlYXRlXzA6CnByb3RvIDAgMAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIG5lZ2F0ZQpuZWdhdGVfMToKcHJvdG8gMSAxCmZyYW1lX2RpZyAtMQpleHRyYWN0IDAgNDgKYnl0ZWNfMCAvLyAweDFhMDExMWVhMzk3ZmU2OWE0YjFiYTdiNjQzNGJhY2Q3NjQ3NzRiODRmMzg1MTJiZjY3MzBkMmEwZjZiMGY2MjQxZWFiZmZmZWIxNTNmZmZmYjlmZWZmZmZmZmZmYWFhYgpmcmFtZV9kaWcgLTEKZXh0cmFjdCA0OCAwCmJ5dGVjXzAgLy8gMHgxYTAxMTFlYTM5N2ZlNjlhNGIxYmE3YjY0MzRiYWNkNzY0Nzc0Yjg0ZjM4NTEyYmY2NzMwZDJhMGY2YjBmNjI0MWVhYmZmZmViMTUzZmZmZmI5ZmVmZmZmZmZmZmFhYWIKYiUKYi0KY29uY2F0CnJldHN1YgoKLy8gY29tcHV0ZV9saW5lYXJfY29tYmluYXRpb24KY29tcHV0ZWxpbmVhcmNvbWJpbmF0aW9uXzI6CnByb3RvIDIgMQpmcmFtZV9kaWcgLTIKaW50Y18yIC8vIDY3MgpkaWcgMQpsZW4Kc3Vic3RyaW5nMwpleHRyYWN0IDk2IDAKZnJhbWVfZGlnIC0xCmNhbGxzdWIgY3VydmVtdWx0aWV4cF81CmZyYW1lX2RpZyAtMgppbnRjXzIgLy8gNjcyCmRpZyAxCmxlbgpzdWJzdHJpbmczCmV4dHJhY3QgMCA5NgpjYWxsc3ViIGN1cnZlYWRkXzQKcmV0c3ViCgovLyB2YWxpZF9wYWlyaW5nCnZhbGlkcGFpcmluZ18zOgpwcm90byAzIDEKZnJhbWVfZGlnIC0zCmV4dHJhY3QgMCA5NgpjYWxsc3ViIG5lZ2F0ZV8xCmZyYW1lX2RpZyAtMgpleHRyYWN0IDAgOTYKY29uY2F0CmZyYW1lX2RpZyAtMQpjb25jYXQKZnJhbWVfZGlnIC0zCmludGNfMyAvLyAyODgKZGlnIDEKbGVuCnN1YnN0cmluZzMKY29uY2F0CnN0b3JlIDAKZnJhbWVfZGlnIC0zCmV4dHJhY3QgOTYgMTkyCmZyYW1lX2RpZyAtMgpleHRyYWN0IDk2IDE5Mgpjb25jYXQKZnJhbWVfZGlnIC0yCmludGNfMyAvLyAyODgKaW50YyA0IC8vIDE5MgpleHRyYWN0Mwpjb25jYXQKZnJhbWVfZGlnIC0yCnB1c2hpbnQgNDgwIC8vIDQ4MAppbnRjIDQgLy8gMTkyCmV4dHJhY3QzCmNvbmNhdApzdG9yZSAxCmxvYWQgMApsb2FkIDEKY2FsbHN1YiBjdXJ2ZXBhaXJpbmdfNgpyZXRzdWIKCi8vIGN1cnZlX2FkZApjdXJ2ZWFkZF80Ogpwcm90byAyIDEKZnJhbWVfZGlnIC0yCmZyYW1lX2RpZyAtMQplY19hZGQgQkxTMTJfMzgxX0cxCnJldHN1YgoKLy8gY3VydmVfbXVsdGlfZXhwCmN1cnZlbXVsdGlleHBfNToKcHJvdG8gMiAxCmZyYW1lX2RpZyAtMgpmcmFtZV9kaWcgLTEKZWNfbXVsdGlfZXhwIEJMUzEyXzM4MV9HMQpyZXRzdWIKCi8vIGN1cnZlX3BhaXJpbmcKY3VydmVwYWlyaW5nXzY6CnByb3RvIDIgMQpmcmFtZV9kaWcgLTIKZnJhbWVfZGlnIC0xCmVjX3BhaXJpbmdfY2hlY2sgQkxTMTJfMzgxX0cxCnJldHN1YgoKLy8gYXV0aF9vbmx5CmF1dGhvbmx5Xzc6CnByb3RvIDEgMQpmcmFtZV9kaWcgLTEKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09CnJldHN1YgoKLy8gdXBkYXRlCnVwZGF0ZV84Ogpwcm90byAwIDAKdHhuIFNlbmRlcgpjYWxsc3ViIGF1dGhvbmx5XzcKLy8gdW5hdXRob3JpemVkCmFzc2VydAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGF1dGhfb25seQphdXRob25seV85Ogpwcm90byAxIDEKZnJhbWVfZGlnIC0xCmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQpyZXRzdWIKCi8vIGJvb3RzdHJhcApib290c3RyYXBfMTA6CnByb3RvIDEgMAp0eG4gU2VuZGVyCmNhbGxzdWIgYXV0aG9ubHlfOQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmJ5dGVjXzEgLy8gInZrIgpmcmFtZV9kaWcgLTEKYm94X3B1dApyZXRzdWIKCi8vIHZlcmlmeQp2ZXJpZnlfMTE6CnByb3RvIDIgMQppbnRjXzAgLy8gMApwdXNoYnl0ZXMgMHggLy8gIiIKZHVwCnB1c2hpbnQgMTM1MDAgLy8gMTM1MDAKcHVzaGludCAxMCAvLyAxMAorCnN0b3JlIDUKdmVyaWZ5XzExX2wxOgpsb2FkIDUKZ2xvYmFsIE9wY29kZUJ1ZGdldAo+CmJ6IHZlcmlmeV8xMV9sMwppdHhuX2JlZ2luCnB1c2hpbnQgNiAvLyBhcHBsCml0eG5fZmllbGQgVHlwZUVudW0KcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCml0eG5fZmllbGQgT25Db21wbGV0aW9uCmJ5dGVjXzIgLy8gMHgwNjgxMDEKaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KYnl0ZWNfMiAvLyAweDA2ODEwMQppdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCml0eG5fc3VibWl0CmIgdmVyaWZ5XzExX2wxCnZlcmlmeV8xMV9sMzoKYnl0ZWNfMSAvLyAidmsiCmJveF9nZXQKc3RvcmUgNwpzdG9yZSA2CmxvYWQgNwovLyBWZXJpZmljYXRpb24gS2V5IG5vdCBzZXQKYXNzZXJ0CmxvYWQgNgpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZnJhbWVfZGlnIC0yCmNhbGxzdWIgY29tcHV0ZWxpbmVhcmNvbWJpbmF0aW9uXzIKZnJhbWVfYnVyeSAyCmZyYW1lX2RpZyAtMQpmcmFtZV9kaWcgMQpmcmFtZV9kaWcgMgpjYWxsc3ViIHZhbGlkcGFpcmluZ18zCiEKIQpmcmFtZV9idXJ5IDAKcmV0c3Vi",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDkKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "schema": {
        "local": {
            "declared": {},
            "reserved": {}
        },
        "global": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Verifier",
        "methods": [
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2][2],byte[48][2][2],byte[48][2][2])",
                        "name": "vk"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "verify",
                "args": [
                    {
                        "type": "byte[32][1]",
                        "name": "inputs"
                    },
                    {
                        "type": "(byte[48][2],byte[48][2][2],byte[48][2])",
                        "name": "proof"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    }
}
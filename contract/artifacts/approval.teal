#pragma version 8
intcblock 0 1 64 32 448
bytecblock 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47 0x766b 0x151f7c75 0x068101
txn NumAppArgs
intc_0 // 0
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x793ae44d // "bootstrap((byte[32][2],byte[32][2][2],byte[32][2][2],byte[32][2][2],byte[32][2][2]))void"
==
bnz main_l7
txna ApplicationArgs 0
pushbytes 0x9162053b // "verify(byte[32][1],(byte[32][2],byte[32][2][2],byte[32][2]))byte[32][2]"
==
bnz main_l6
txna ApplicationArgs 0
pushbytes 0x59c3b0a7 // "get_vk()(byte[32][2],byte[32][2][2],byte[32][2][2],byte[32][2][2],byte[32][2][2])"
==
bnz main_l5
err
main_l5:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub getvk_12
store 8
bytec_2 // 0x151f7c75
load 8
concat
log
intc_1 // 1
return
main_l6:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
store 0
txna ApplicationArgs 2
store 1
load 0
load 1
callsub verify_11
store 2
bytec_2 // 0x151f7c75
load 2
concat
log
intc_1 // 1
return
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub bootstrap_10
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l12
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz main_l11
err
main_l11:
txn ApplicationID
intc_0 // 0
!=
assert
callsub update_9
intc_1 // 1
return
main_l12:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_0
intc_1 // 1
return

// create
create_0:
intc_1 // 1
return

// add
add_1:
callsub curveadd_5
retsub

// scale
scale_2:
callsub curvescalarmul_6
retsub

// assert_proof_points_lt_prime_q
assertproofpointsltprimeq_3:
store 12
load 12
extract 0 64
store 13
load 13
extract 0 32
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// a point > primeq
assert
load 13
extract 32 0
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// a point > primeq
assert
load 12
extract 64 128
store 14
load 14
intc_2 // 64
intc_0 // 0
*
intc_2 // 64
extract3
store 15
load 15
extract 0 32
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// b0 point > primeq
assert
load 15
extract 32 0
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// b0 point > primeq
assert
load 14
intc_2 // 64
intc_1 // 1
*
intc_2 // 64
extract3
store 16
load 16
extract 0 32
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// b1 point > primeq
assert
load 16
extract 32 0
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// b1 point > primeq
assert
load 12
extract 192 0
store 17
load 17
extract 0 32
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// c point > primeq
assert
load 17
extract 32 0
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// c point > primeq
assert
retsub

// compute_linear_combination
computelinearcombination_4:
store 19
store 18
pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
store 21
intc_0 // 0
store 22
computelinearcombination_4_l1:
load 22
intc_1 // 1
<
bz computelinearcombination_4_l3
load 19
intc_3 // 32
load 22
*
intc_3 // 32
extract3
store 23
load 23
pushbytes 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 // 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
b<
// verifier gte snark scalar
assert
load 18
intc 4 // 448
dig 1
len
substring3
intc_2 // 64
load 22
intc_1 // 1
+
*
intc_2 // 64
extract3
load 23
callsub scale_2
store 20
load 21
load 20
callsub add_1
store 21
load 22
intc_1 // 1
+
store 22
b computelinearcombination_4_l1
computelinearcombination_4_l3:
load 18
intc 4 // 448
dig 1
len
substring3
intc_2 // 64
intc_0 // 0
*
intc_2 // 64
extract3
store 24
load 21
load 24
callsub add_1
store 21
load 21
retsub

// curve_add
curveadd_5:
ec_add BN254_G1
retsub

// curve_scalar_mul
curvescalarmul_6:
ec_scalar_mul BN254_G1
retsub

// auth_only
authonly_7:
global CreatorAddress
==
retsub

// auth_only
authonly_8:
global CreatorAddress
==
retsub

// update
update_9:
txn Sender
callsub authonly_8
// unauthorized
assert
intc_1 // 1
return

// bootstrap
bootstrap_10:
store 11
txn Sender
callsub authonly_7
// unauthorized
assert
bytec_1 // "vk"
load 11
box_put
retsub

// verify
verify_11:
store 4
store 3
pushint 16000 // 16000
pushint 10 // 10
+
store 5
verify_11_l1:
load 5
global OpcodeBudget
>
bz verify_11_l3
itxn_begin
pushint 6 // appl
itxn_field TypeEnum
pushint 5 // DeleteApplication
itxn_field OnCompletion
bytec_3 // 0x068101
itxn_field ApprovalProgram
bytec_3 // 0x068101
itxn_field ClearStateProgram
itxn_submit
b verify_11_l1
verify_11_l3:
load 4
callsub assertproofpointsltprimeq_3
bytec_1 // "vk"
box_get
store 7
store 6
load 7
// Verification Key not set
assert
load 6
load 3
callsub computelinearcombination_4
retsub

// get_vk
getvk_12:
bytec_1 // "vk"
box_get
store 10
store 9
load 10
// Verification Key not set
assert
load 9
retsub
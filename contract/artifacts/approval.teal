#pragma version 9
intcblock 0 1 64 32 448
bytecblock 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47 0x766b 0x068101 0x151f7c75 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
txn NumAppArgs
intc_0 // 0
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0x793ae44d // "bootstrap((byte[32][2],byte[32][2][2],byte[32][2][2],byte[32][2][2],byte[32][2][2]))void"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0xd45a05a9 // "sum_inputs(byte[32][1])byte[32][2]"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x390cb476 // "verify(byte[32][1],(byte[32][2],byte[32][2][2],byte[32][2]))bool"
==
bnz main_l7
txna ApplicationArgs 0
pushbytes 0x59c3b0a7 // "get_vk()(byte[32][2],byte[32][2][2],byte[32][2][2],byte[32][2][2],byte[32][2][2])"
==
bnz main_l6
err
main_l6:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub getvk_16
store 15
bytec_3 // 0x151f7c75
load 15
concat
log
intc_1 // 1
return
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
store 5
txna ApplicationArgs 2
store 6
load 5
load 6
callsub verify_15
store 7
bytec_3 // 0x151f7c75
pushbytes 0x00 // 0x00
intc_0 // 0
load 7
setbit
concat
log
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub suminputs_14
store 0
bytec_3 // 0x151f7c75
load 0
concat
log
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
callsub bootstrap_13
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l14
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz main_l13
err
main_l13:
txn ApplicationID
intc_0 // 0
!=
assert
callsub update_11
intc_1 // 1
return
main_l14:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_0
intc_1 // 1
return

// create
create_0:
intc_1 // 1
return

// add
add_1:
callsub curveadd_7
retsub

// scale
scale_2:
callsub curvescalarmul_8
retsub

// negate
negate_3:
store 42
load 42
bytec 4 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b==
bnz negate_3_l2
load 42
extract 0 32
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
load 42
extract 32 0
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b%
b-
concat
b negate_3_l3
negate_3_l2:
load 42
negate_3_l3:
retsub

// assert_proof_points_lt_prime_q
assertproofpointsltprimeq_4:
store 26
load 26
extract 0 64
store 27
load 27
extract 0 32
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// a point > primeq
assert
load 27
extract 32 0
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// a point > primeq
assert
load 26
extract 64 128
store 28
load 28
intc_2 // 64
intc_0 // 0
*
intc_2 // 64
extract3
store 29
load 29
extract 0 32
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// b0 point > primeq
assert
load 29
extract 32 0
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// b0 point > primeq
assert
load 28
intc_2 // 64
intc_1 // 1
*
intc_2 // 64
extract3
store 30
load 30
extract 0 32
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// b1 point > primeq
assert
load 30
extract 32 0
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// b1 point > primeq
assert
load 26
extract 192 0
store 31
load 31
extract 0 32
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// c point > primeq
assert
load 31
extract 32 0
bytec_0 // 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
b<
// c point > primeq
assert
retsub

// compute_linear_combination
computelinearcombination_5:
store 20
store 19
bytec 4 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
store 22
intc_0 // 0
store 23
computelinearcombination_5_l1:
load 23
intc_1 // 1
<
bz computelinearcombination_5_l3
load 20
intc_3 // 32
load 23
*
intc_3 // 32
extract3
store 24
load 24
pushbytes 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 // 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
b<
// input >= snark scalar
assert
load 19
intc 4 // 448
dig 1
len
substring3
intc_2 // 64
load 23
intc_1 // 1
+
*
intc_2 // 64
extract3
load 24
callsub scale_2
store 21
load 22
load 21
callsub add_1
store 22
load 23
intc_1 // 1
+
store 23
b computelinearcombination_5_l1
computelinearcombination_5_l3:
load 19
intc 4 // 448
dig 1
len
substring3
intc_2 // 64
intc_0 // 0
*
intc_2 // 64
extract3
store 25
load 22
load 25
callsub add_1
store 22
load 22
retsub

// valid_pairing
validpairing_6:
store 34
store 33
store 32
load 32
extract 0 64
callsub negate_3
store 35
load 33
extract 0 64
store 37
load 35
load 37
concat
store 35
load 35
load 34
concat
store 35
load 32
extract 192 0
store 38
load 35
load 38
concat
store 35
load 32
extract 64 128
store 36
load 33
extract 64 128
store 39
load 36
load 39
concat
store 36
load 33
extract 192 128
store 40
load 36
load 40
concat
store 36
load 33
pushint 320 // 320
pushint 128 // 128
extract3
store 41
load 36
load 41
concat
store 36
load 35
load 36
callsub curvepairing_9
retsub

// curve_add
curveadd_7:
ec_add BN254_G1
retsub

// curve_scalar_mul
curvescalarmul_8:
ec_scalar_mul BN254_G1
retsub

// curve_pairing
curvepairing_9:
ec_pairing_check BN254
retsub

// auth_only
authonly_10:
global CreatorAddress
==
retsub

// update
update_11:
txn Sender
callsub authonly_10
// unauthorized
assert
intc_1 // 1
return

// auth_only
authonly_12:
global CreatorAddress
==
retsub

// bootstrap
bootstrap_13:
store 18
txn Sender
callsub authonly_12
// unauthorized
assert
bytec_1 // "vk"
load 18
box_put
retsub

// sum_inputs
suminputs_14:
store 1
pushint 1300 // 1300
pushint 10 // 10
+
store 2
suminputs_14_l1:
load 2
global OpcodeBudget
>
bz suminputs_14_l3
itxn_begin
pushint 6 // appl
itxn_field TypeEnum
pushint 5 // DeleteApplication
itxn_field OnCompletion
bytec_2 // 0x068101
itxn_field ApprovalProgram
bytec_2 // 0x068101
itxn_field ClearStateProgram
itxn_submit
b suminputs_14_l1
suminputs_14_l3:
bytec_1 // "vk"
box_get
store 4
store 3
load 4
// Verification Key not set
assert
load 3
load 1
callsub computelinearcombination_5
retsub

// verify
verify_15:
store 9
store 8
pushint 1350 // 1350
pushint 10 // 10
+
store 10
verify_15_l1:
load 10
global OpcodeBudget
>
bz verify_15_l3
itxn_begin
pushint 6 // appl
itxn_field TypeEnum
pushint 5 // DeleteApplication
itxn_field OnCompletion
bytec_2 // 0x068101
itxn_field ApprovalProgram
bytec_2 // 0x068101
itxn_field ClearStateProgram
itxn_submit
b verify_15_l1
verify_15_l3:
load 9
callsub assertproofpointsltprimeq_4
bytec_1 // "vk"
box_get
store 13
store 12
load 13
// Verification Key not set
assert
load 12
store 11
load 11
load 8
callsub computelinearcombination_5
store 14
load 9
load 11
load 14
callsub validpairing_6
!
!
retsub

// get_vk
getvk_16:
bytec_1 // "vk"
box_get
store 17
store 16
load 17
// Verification Key not set
assert
load 16
retsub
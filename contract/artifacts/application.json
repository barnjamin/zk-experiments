{
    "hints": {
        "bootstrap": {
            "structs": {
                "vk": {
                    "name": "VerificationKey",
                    "elements": [
                        [
                            "alpha1",
                            "byte[32][2]"
                        ],
                        [
                            "beta2",
                            "byte[32][2][2]"
                        ],
                        [
                            "gamma2",
                            "byte[32][2][2]"
                        ],
                        [
                            "delta2",
                            "byte[32][2][2]"
                        ],
                        [
                            "IC",
                            "byte[32][2][2]"
                        ]
                    ]
                }
            }
        },
        "verify": {
            "structs": {
                "proof": {
                    "name": "Proof",
                    "elements": [
                        [
                            "A",
                            "byte[32][2]"
                        ],
                        [
                            "B",
                            "byte[32][2][2]"
                        ],
                        [
                            "C",
                            "byte[32][2]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMSA2NCAzMiA0NDgKYnl0ZWNibG9jayAweDc2NmIgMHgxNTFmN2M3NSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwIDB4MzA2NDRlNzJlMTMxYTAyOWI4NTA0NWI2ODE4MTU4NWQ5NzgxNmE5MTY4NzFjYThkM2MyMDhjMTZkODdjZmQ0Nwp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sOAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDc5M2FlNDRkIC8vICJib290c3RyYXAoKGJ5dGVbMzJdWzJdLGJ5dGVbMzJdWzJdWzJdLGJ5dGVbMzJdWzJdWzJdLGJ5dGVbMzJdWzJdWzJdLGJ5dGVbMzJdWzJdWzJdKSl2b2lkIgo9PQpibnogbWFpbl9sNwp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDhiNzM3MWRhIC8vICJ2ZXJpZnkoYnl0ZVszMl1bXSwoYnl0ZVszMl1bMl0sYnl0ZVszMl1bMl1bMl0sYnl0ZVszMl1bMl0pKWJvb2wiCj09CmJueiBtYWluX2w2CnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4NTljM2IwYTcgLy8gImdldF92aygpKGJ5dGVbMzJdWzJdLGJ5dGVbMzJdWzJdWzJdLGJ5dGVbMzJdWzJdWzJdLGJ5dGVbMzJdWzJdWzJdLGJ5dGVbMzJdWzJdWzJdKSIKPT0KYm56IG1haW5fbDUKZXJyCm1haW5fbDU6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgZ2V0dmtfMTMKc3RvcmUgMTYKYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CmxvYWQgMTYKY29uY2F0CmxvZwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpzdG9yZSAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDIKc3RvcmUgMQpsb2FkIDAKbG9hZCAxCmNhbGxzdWIgdmVyaWZ5XzEyCnN0b3JlIDIKYnl0ZWNfMSAvLyAweDE1MWY3Yzc1CnB1c2hieXRlcyAweDAwIC8vIDB4MDAKaW50Y18wIC8vIDAKbG9hZCAyCnNldGJpdApjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2w3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmNhbGxzdWIgYm9vdHN0cmFwXzExCmludGNfMSAvLyAxCnJldHVybgptYWluX2w4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wxMAplcnIKbWFpbl9sMTA6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCj09CmFzc2VydApjYWxsc3ViIGNyZWF0ZV8wCmludGNfMSAvLyAxCnJldHVybgoKLy8gY3JlYXRlCmNyZWF0ZV8wOgppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGFkZAphZGRfMToKY2FsbHN1YiBjdXJ2ZWFkZF83CnJldHN1YgoKLy8gc2NhbGUKc2NhbGVfMjoKY2FsbHN1YiBjdXJ2ZXNjYWxhcm11bF84CnJldHN1YgoKLy8gbmVnYXRlCm5lZ2F0ZV8zOgpzdG9yZSAyOQpsb2FkIDI5CmJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMApiPT0KYm56IG5lZ2F0ZV8zX2wyCmxvYWQgMjkKYnl0ZWNfMyAvLyAweDMwNjQ0ZTcyZTEzMWEwMjliODUwNDViNjgxODE1ODVkOTc4MTZhOTE2ODcxY2E4ZDNjMjA4YzE2ZDg3Y2ZkNDcKbG9hZCAyOQpleHRyYWN0IDMyIDAKYnl0ZWNfMyAvLyAweDMwNjQ0ZTcyZTEzMWEwMjliODUwNDViNjgxODE1ODVkOTc4MTZhOTE2ODcxY2E4ZDNjMjA4YzE2ZDg3Y2ZkNDcKYiUKYi0KcmVwbGFjZTIgMzIKYiBuZWdhdGVfM19sMwpuZWdhdGVfM19sMjoKbG9hZCAyOQpuZWdhdGVfM19sMzoKcmV0c3ViCgovLyBjaGVja19wcm9vZl92YWx1ZXMKY2hlY2twcm9vZnZhbHVlc180OgpzdG9yZSAyMAppbnRjXzEgLy8gMQpyZXRzdWIKCi8vIGNvbXB1dGVfbGluZWFyX2NvbWJpbmF0aW9uCmNvbXB1dGVsaW5lYXJjb21iaW5hdGlvbl81OgpzdG9yZSAxMApzdG9yZSA5CmJ5dGVjXzIgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMApzdG9yZSAxMQppbnRjXzAgLy8gMApzdG9yZSAxMwpjb21wdXRlbGluZWFyY29tYmluYXRpb25fNV9sMToKbG9hZCAxMwpsb2FkIDEwCmludGNfMCAvLyAwCmV4dHJhY3RfdWludDE2CjwKYnogY29tcHV0ZWxpbmVhcmNvbWJpbmF0aW9uXzVfbDMKbG9hZCAxMAppbnRjXzMgLy8gMzIKbG9hZCAxMwoqCnB1c2hpbnQgMiAvLyAyCisKaW50Y18zIC8vIDMyCmV4dHJhY3QzCnN0b3JlIDE0CmxvYWQgMTQKcHVzaGJ5dGVzIDB4MzA2NDRlNzJlMTMxYTAyOWI4NTA0NWI2ODE4MTU4NWQyODMzZTg0ODc5Yjk3MDkxNDNlMWY1OTNmMDAwMDAwMSAvLyAweDMwNjQ0ZTcyZTEzMWEwMjliODUwNDViNjgxODE1ODVkMjgzM2U4NDg3OWI5NzA5MTQzZTFmNTkzZjAwMDAwMDEKYjwKLy8gdmVyaWZpZXIgZ3RlIHNuYXJrIHNjYWxhcgphc3NlcnQKbG9hZCA5CmludGMgNCAvLyA0NDgKZGlnIDEKbGVuCnN1YnN0cmluZzMKaW50Y18yIC8vIDY0CmxvYWQgMTMKaW50Y18xIC8vIDEKKwoqCmludGNfMiAvLyA2NApleHRyYWN0Mwpsb2FkIDE0CmNhbGxzdWIgc2NhbGVfMgpzdG9yZSAxMgpsb2FkIDExCmxvYWQgMTIKY2FsbHN1YiBhZGRfMQpzdG9yZSAxMQpsb2FkIDEzCmludGNfMSAvLyAxCisKc3RvcmUgMTMKYiBjb21wdXRlbGluZWFyY29tYmluYXRpb25fNV9sMQpjb21wdXRlbGluZWFyY29tYmluYXRpb25fNV9sMzoKbG9hZCA5CmludGMgNCAvLyA0NDgKZGlnIDEKbGVuCnN1YnN0cmluZzMKaW50Y18yIC8vIDY0CmludGNfMCAvLyAwCioKaW50Y18yIC8vIDY0CmV4dHJhY3QzCnN0b3JlIDE1CmxvYWQgMTEKbG9hZCAxNQpjYWxsc3ViIGFkZF8xCnN0b3JlIDExCmxvYWQgMTEKcmV0c3ViCgovLyB2YWxpZF9wYWlyaW5nCnZhbGlkcGFpcmluZ182OgpzdG9yZSAyMwpzdG9yZSAyMgpzdG9yZSAyMQpsb2FkIDIxCmV4dHJhY3QgMCA2NApjYWxsc3ViIG5lZ2F0ZV8zCnN0b3JlIDI0CmxvYWQgMjEKZXh0cmFjdCA2NCAxMjgKc3RvcmUgMjUKbG9hZCAyMgpleHRyYWN0IDAgNjQKc3RvcmUgMjYKbG9hZCAyNApsb2FkIDI2CmNvbmNhdApzdG9yZSAyNApsb2FkIDIyCmV4dHJhY3QgNjQgMTI4CnN0b3JlIDI3CmxvYWQgMjUKbG9hZCAyNwpjb25jYXQKc3RvcmUgMjUKbG9hZCAyNApsb2FkIDIzCmNvbmNhdApzdG9yZSAyNApsb2FkIDIyCmV4dHJhY3QgMTkyIDEyOApzdG9yZSAyOApsb2FkIDI1CmxvYWQgMjgKY29uY2F0CnN0b3JlIDI1CmxvYWQgMjQKbG9hZCAyNQpjYWxsc3ViIGN1cnZlcGFpcmluZ185CnJldHN1YgoKLy8gY3VydmVfYWRkCmN1cnZlYWRkXzc6CmVjX2FkZApyZXRzdWIKCi8vIGN1cnZlX3NjYWxhcl9tdWwKY3VydmVzY2FsYXJtdWxfODoKZWNfc2NhbGFyX211bApyZXRzdWIKCi8vIGN1cnZlX3BhaXJpbmcKY3VydmVwYWlyaW5nXzk6CmVjX3BhaXJpbmcKcmV0c3ViCgovLyBhdXRoX29ubHkKYXV0aG9ubHlfMTA6Cmdsb2JhbCBDcmVhdG9yQWRkcmVzcwo9PQpyZXRzdWIKCi8vIGJvb3RzdHJhcApib290c3RyYXBfMTE6CnN0b3JlIDE5CnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob25seV8xMAovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmJ5dGVjXzAgLy8gInZrIgpsb2FkIDE5CmJveF9wdXQKcmV0c3ViCgovLyB2ZXJpZnkKdmVyaWZ5XzEyOgpzdG9yZSA0CnN0b3JlIDMKbG9hZCA0CmNhbGxzdWIgY2hlY2twcm9vZnZhbHVlc180Ci8vIEEgdmFsdWUgaW4gdGhlIHByb29mIHdhcyA+IFByaW1lUQphc3NlcnQKYnl0ZWNfMCAvLyAidmsiCmJveF9nZXQKc3RvcmUgNwpzdG9yZSA2CmxvYWQgNwovLyBWZXJpZmljYXRpb24gS2V5IG5vdCBzZXQKYXNzZXJ0CmxvYWQgNgpzdG9yZSA1CmxvYWQgNQpsb2FkIDMKY2FsbHN1YiBjb21wdXRlbGluZWFyY29tYmluYXRpb25fNQpzdG9yZSA4CmxvYWQgNApsb2FkIDUKbG9hZCA4CmNhbGxzdWIgdmFsaWRwYWlyaW5nXzYKIQohCnJldHN1YgoKLy8gZ2V0X3ZrCmdldHZrXzEzOgpieXRlY18wIC8vICJ2ayIKYm94X2dldApzdG9yZSAxOApzdG9yZSAxNwpsb2FkIDE4Ci8vIFZlcmlmaWNhdGlvbiBLZXkgbm90IHNldAphc3NlcnQKbG9hZCAxNwpyZXRzdWI=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "schema": {
        "local": {
            "declared": {},
            "reserved": {}
        },
        "global": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Verifier",
        "methods": [
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "(byte[32][2],byte[32][2][2],byte[32][2][2],byte[32][2][2],byte[32][2][2])",
                        "name": "vk"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "verify",
                "args": [
                    {
                        "type": "byte[32][]",
                        "name": "inputs"
                    },
                    {
                        "type": "(byte[32][2],byte[32][2][2],byte[32][2])",
                        "name": "proof"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "get_vk",
                "args": [],
                "returns": {
                    "type": "(byte[32][2],byte[32][2][2],byte[32][2][2],byte[32][2][2],byte[32][2][2])"
                }
            }
        ],
        "networks": {}
    }
}
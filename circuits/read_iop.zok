import "hashes/sha256/512bit" as hash;
from "utils/casts" import cast;
from "./utils/const" import ShaRngState, SHA_RNG_ROUND_BACK, DIGEST_WORD_NUM, ShaDigest;

// SHA based RNG definitions

def sha_rng_step(ShaRngState mut old_state) -> ShaRngState {
    old_state.pool0 = hash(old_state.pool0, old_state.pool1);
    old_state.pool1 = hash(old_state.pool0, old_state.pool1);
    old_state.cnt = 0;
    return old_state;
}

def sha_rng_incr(ShaRngState mut old_state) -> ShaRngState {
    old_state.cnt = old_state.cnt + 1;
    return if old_state.cnt == SHA_RNG_ROUND_BACK {
        sha_rng_step(old_state)
    } else {
        old_state
    };
}

def sha_rng_next_u32(ShaRngState mut old_state) -> (ShaRngState, u32) {
    u32 mut rand_u32 = old_state.pool0[old_state.cnt];
    old_state = sha_rng_incr(old_state);
    // cast to small endian
    rand_u32 = (rand_u32 >> 24) | ((rand_u32 << 8) & 0x00ff0000) | ((rand_u32 >> 8) & 0x0000ff00) | (rand_u32 << 24);
    return (old_state, rand_u32);
}

def sha_rng_next_u64(ShaRngState mut old_state) -> (ShaRngState, u64) {
    (ShaRngState, u32) mut temp = sha_rng_next_u32(old_state);
    u32 higher_u32 = temp.1;
    temp = sha_rng_next_u32(temp.0);
    u32 lower_u32 = temp.1;
    u64 rand_u32 = cast([higher_u32, lower_u32]);
    return (temp.0, rand_u32);
}

def sha_rng_mix(ShaRngState mut old_state, ShaDigest digest) -> ShaRngState {
    for u32 i in 0..DIGEST_WORD_NUM {
        old_state.pool0[i] = old_state.pool0[i] ^ digest[i];
    }
    return sha_rng_step(old_state);
}
